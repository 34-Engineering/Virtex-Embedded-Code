<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US" prefix="og: http://ogp.me/ns#">

<head>
    <title>Virtex Serial Testing</title>
    <meta charset="utf-8">
    <meta content="text/html" http-equiv="Content-Type">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
    <meta name="title" content="Virtex Serial Testing">

    <style>
        /* generic */
        body {
            display: flex;
            height: 100vh;
            width: 100vw;
            max-width: 100vw;
            /* background: black; */
            background: repeating-linear-gradient(45deg, black, rgb(5, 0, 5) 15%, rgb(8, 0, 8) 20%);
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            overflow-y: auto;
        }

        *,
        *::before,
        *::after {
            font-family: Verdana, sans-serif;
            font-size: 16px;
            text-decoration: none;
            text-transform: uppercase;
            font-weight: 600;
            box-sizing: border-box;
        }

        .canvas-wrapper {
            width: 100vw;
            height: 100vh;
            /* padding: 50px; */
        }

        #canvas {
            height: 100vh;
            border: 1px solid red;
            display: block;
            background: black;
        }
    </style>
</head>

<body>
    <div class="canvas-wrapper">
        <canvas id="canvas" width="640" height="480"></canvas>
    </div>

    <script>
        const canvasWrapper = document.querySelector('.canvas-wrapper');
        const canvas = document.querySelector('#canvas');
        const ctx = canvas.getContext('2d');

        //Draw Frame
        let frame;
        let boot = false;
        function drawFrame() {
            if (!frame) return;

            if (!boot) { boot = true; console.log(frame); }

            const img = ctx.createImageData(640, 480);
            for (let i = 0; i < frame.length; i++) {
                const idx = i << 3;
                const pix1 = (frame[i] & 0xF) * 17;
                const pix2 = (frame[i] >> 4) * 17;

                img.data[idx + 0] = pix1;
                img.data[idx + 1] = pix1;
                img.data[idx + 2] = pix1;
                img.data[idx + 3] = 255;
                img.data[idx + 4] = pix2;
                img.data[idx + 5] = pix2;
                img.data[idx + 6] = pix2;
                img.data[idx + 7] = 255;
            }
            ctx.putImageData(img, 0, 0);
        }
        drawFrame();

        //POST Request + Update UI based on Response
        const sleep = ms => new Promise(r => setTimeout(r, ms));
        async function main() {
            while (1) {
                const newFrame = (await post('/frame', {})).frame;
                if (newFrame) {
                    frame = newFrame.data;
                    drawFrame();
                    await sleep(0.1);
                }
            }
        }
        main();

        //Ping (keep track of what process we were using
        //and if a new process spawns, reload page)
        let pid;
        post('/ping').then((res) => pid = res.pid);
        setInterval(async () => {
            const res = await post('/ping');
            if (res.pid !== pid) {
                window.location.reload();
            }
        }, 250);

        //HTTP POST Request
        async function post(url, data = {}) {
            const res = await (await fetch(url, {
                method: 'POST',
                cache: 'no-cache',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })).json();
            if (res.error) {
                //log error
                console.error(res.error);
            }
            return res;
        }
    </script>
</body>

</html>