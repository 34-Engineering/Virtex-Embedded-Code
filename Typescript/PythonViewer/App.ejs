<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US" prefix="og: http://ogp.me/ns#">

<head>
    <title>Virtex Serial Testing</title>
    <meta charset="utf-8">
    <meta content="text/html" http-equiv="Content-Type">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
    <meta name="title" content="Virtex Serial Testing">

    <style>
        /* generic */
        body {
            display: flex;
            height: 100vh;
            width: 100vw;
            max-width: 100vw;
            /* background: black; */
            background: repeating-linear-gradient(45deg, black, rgb(5, 0, 5) 15%, rgb(8, 0, 8) 20%);
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            overflow-y: auto;
        }

        *,
        *::before,
        *::after {
            font-family: Verdana, sans-serif;
            font-size: 16px;
            text-decoration: none;
            text-transform: uppercase;
            font-weight: 600;
            box-sizing: border-box;
        }

        .canvas-wrapper {
            width: 100vw;
            height: 100vh;
            /* padding: 50px; */
        }

        #canvas {
            height: 100vh;
            border: 1px solid red;
            display: block;
            background: black;
        }
    </style>
</head>

<body>
    <div class="canvas-wrapper">
        <canvas id="canvas" width="640" height="480"></canvas>
    </div>

    <script src="socket.io.js"></script>
    <script>
        let socket = io();
        const canvasWrapper = document.querySelector('.canvas-wrapper');
        const canvas = document.querySelector('#canvas');
        const ctx = canvas.getContext('2d');

        //Draw Frame
        let frame;
        let target = {
            center: {x:0, y:0},
            width: 0,
            height: 0,
            blobCount: 0,
            angle: 0
        };

        function drawFrame() {
            const img = ctx.createImageData(640, 480);
            for (let i = 0; i < frame.length; i++) {
                const idx = i << 3;
                const pix1 = (frame[i] & 0xF) * 17 > 128 ? 255 : 0;
                const pix2 = (frame[i] >> 4) * 17  > 128 ? 255 : 0;

                img.data[idx + 0] = pix1;
                img.data[idx + 1] = pix1;
                img.data[idx + 2] = pix1;
                img.data[idx + 3] = 255;
                img.data[idx + 4] = pix2;
                img.data[idx + 5] = pix2;
                img.data[idx + 6] = pix2;
                img.data[idx + 7] = 255;
            }
            ctx.putImageData(img, 0, 0);
        }

        //Recieved Frame
        socket.on('frame', (newFrame) => {
            frame = new Uint8Array(newFrame);
            drawFrame();
        });
        let lastTarget;
        socket.on('target', (newTarget) => {
            const bytes = new Uint8Array(newTarget);
            let str = "";
            let padByte = (str) => "0".repeat(8 - str.length) + str;
            for (let i = 0; i < bytes.length; i++) str += padByte(bytes[i].toString(2));

            if (str != lastTarget) {
                lastTarget = str;

                target = {
                    center: {
                        x: parseInt(str.slice(0, 10), 2),
                        y: parseInt(str.slice(10, 20), 2)
                    },
                    width: parseInt(str.slice(20, 30), 2),
                    height: parseInt(str.slice(30, 40), 2),
                    blobCount: parseInt(str.slice(40, 46), 2),
                    angle: parseInt(str.slice(46, 48), 2)
                };
                console.log(target);
            }
        });

        //Load Settings
        socket.emit('setting', { addr: 1, value: 0x01 }); //LED brightness
        socket.emit('setting', { addr: 4, value: 0b111100100 }); //analog gain
        socket.emit('setting', { addr: 6, value: 1000 }); //exposure
        socket.emit('setting', { addr: 7, value: 2 }); //mult timer
        socket.emit('setting', { addr: 8, value: 39639 }); //frame length

        socket.emit('enable');
        // socket.emit('disable');
    </script>
</body>

</html>