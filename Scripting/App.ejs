<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en-US" lang="en-US" prefix="og: http://ogp.me/ns#">
<head>
    <title>Virtex Blob App</title>
    <meta charset="utf-8">
    <meta content="text/html" http-equiv="Content-Type">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0">
    <link rel="icon" type="image/x-icon" href="assets/34E_square128.png">
    <meta name="title" content="Virtex Blob App">

    <style>
        /* generic */
        body {
            display: flex;
            height: 100vh;
            width: 100vw;
            max-width: 100vw;
            background: black;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            overflow-y: auto;
        }
        *, *::before, *::after {
            font-family: Verdana, sans-serif;
            font-size: 16px;
            text-decoration: none;
            text-transform: uppercase;
            font-weight: 600;
            box-sizing: border-box;
        }

        /* generic ui */
        button, select {
            margin: 4px 2px;
            border: 2px solid white;
            background-color: black;
            color: white;
            padding: 10px;
            font-size: 16px;
            cursor: pointer;
            text-align: center;
            transition: border 100ms cubic-bezier(0.39, 0.575, 0.565, 1),
                padding 100ms cubic-bezier(0.39, 0.575, 0.565, 1),
                margin 100ms cubic-bezier(0.39, 0.575, 0.565, 1);
            user-select: none;
            outline: none;
            white-space: nowrap;
        }
        button.white, select.white {
            background-color: white;
            color: black;
        }
        button:hover, select:hover {
            border-width: 4px;
            margin: 2px 1px;
        }
        button:active, select:active {
            padding: 8px;
            margin: 4px 3px;   
        }
        button:active:not(.toggle), select:active {
            border-color: goldenrod;
            transition: none;
        }
        .checkbox {
            display: block;
            margin: 5px 0;
            cursor: pointer;
            user-select: none;
            white-space: nowrap;
        }
        .checkbox > input {
            cursor: pointer;
        }
        .checkbox > label {
            color: white;
        }

        /* canvas */
        .canvas-wrapper {
            width: min(calc(100vw - 450px), 133.333vh);
            position: relative;
            border-right: 2px white solid;
        }
        #canvas {
            width: 100%;
            border-bottom: 2px white solid;
        }

        /* sidebar */
        .sidebar {
            margin: 6px 0 0 0;
            width: 450px;
        }

        .header {
            width: 100%;
            padding: 0 0 9px 11px;
            border-bottom: 2px white solid;
        }
        .header > button.reset {
            color: red;
            margin-left: 6px;
        }

        .sidebar-container {
            width: 100%;
            padding: 10px 11px 0 11px;
            display: flex;
            justify-content: space-between;
        }
        .step-container {
            display: flex;
            flex-direction: column;
        }
        .step-container > * {
            display: block;
        }
        .draw-option-container {
            display: flex;
            flex-direction: column;
        }
        .draw-option-container > * {
            display: block;
        }

        .faults {
            display: block;
            color: red;
            margin: 10px 0 0 0;
            font-size: 12px;
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="canvas-wrapper">
        <canvas id="canvas" width="640" height="480"></canvas>
    </div>

    <div class="sidebar">
        <div class="header">
            <select name="image" class="white"
                onchange="if (this.selectedIndex) postAndUpdateUI('/changeImageFile', { file: this.value })">
                <% for (const image of imageFiles) { %>
                    <option value="<%= image %>" <%= image == imageFile ? 'selected' : '' %>><%= image %></option>
                <% } %>
            </select>
            
            <button onclick="postAndUpdateUI('/reset')" class="reset white">
                Reset
            </button>
        </div>
        
        <div class="sidebar-container">
            <div class="step-container">
                <button data-count="<%=5%>" class="step">Step Kernel</button>
                <button data-count="<%=2*5%>" class="step">Step 2 Kernels</button>
                <button data-count="<%=5*5%>" class="step">Step 5 Kernels</button>
                <button data-count="<%=10*5%>" class="step">Step 10 Kernels</button>
                <button data-count="<%=20*5%>" class="step">Step Quarter Line</button>
                <button data-count="<%=40*5%>" class="step">Step Half Line</button>
                <button data-count="<%=80*5%>" class="step">Step Line</button>
                <button data-count="<%=80*2*5%>" class="step">Step 2 Lines</button>
                <button data-count="<%=80*4*5%>" class="step">Step 4 Lines</button>
                <button data-count="<%=80*8*5%>" class="step">Step 8 Lines</button>
                <button data-count="<%=80*15*5%>" class="step">Step 15 Lines</button>
                <button data-count="<%=80*30*5%>" class="step">Step 30 Lines</button>
                <button data-count="<%=80*60*5%>" class="step">Step 60 Lines</button>
                <button data-count="<%=80*120*5%>" class="step">Step 120 Lines</button>
                <button data-count="<%=80*240*5%>" class="step">Step Half Frame</button>
                <button data-count="<%=80*480*5%>" class="step">Step Frame</button>
                <button data-count="<%=Number.MAX_SAFE_INTEGER%>" class="step">Step All</button>
            </div>

            <div class="draw-option-container">
                <% for (const property in drawOptions) { %>
                <button class="toggle <%=drawOptions[property]?'white':''%>"
                    onclick="changeDrawOption(this, '<%= property %>')"><%= property %></button>
                <% } %>
                <div class="faults"></div>
            </div>
        </div>
    </div>

    <script>
        let canvas = document.getElementById('canvas');
        let ctx = canvas.getContext('2d');

        //POST Request + Update UI based on Response
        async function postAndUpdateUI(url, data = {}) {
            const res = await post(url, data);
            if (!res.error) {
                //Update Faults
                document.querySelector('.faults').innerText = res.faults.join(', ');
                
                //Draw Image to Canvas
                const frame = ctx.createImageData(res.image.width, res.image.height);
                // this should work but doesn't :l
                frame.data = new Uint8ClampedArray(res.image.data.data);
                for (let i = 0; i < frame.data.length; i++) {
                    frame.data[i+0] = res.image.data.data[i+0];
                    frame.data[i+1] = res.image.data.data[i+1];
                    frame.data[i+2] = res.image.data.data[i+2];
                    frame.data[i+3] = res.image.data.data[i+3];
                }
                ctx.putImageData(frame, 0, 0);  
            }
        }

        //Draw Image at Start
        postAndUpdateUI('/init');

        //Handle Step Button (which repeat if you hold them)
        let stepButtonHoldInterval, stepButtonHoldCounter;
        [].forEach.call(document.querySelectorAll('button.step'), function(button) {
            button.onmousedown = () => {
                postAndUpdateUI('/step', { count: button.dataset.count });
                stepButtonHoldCounter = 0;
                stepButtonHoldInterval = setInterval(() => {
                    stepButtonHoldCounter++;

                    if (stepButtonHoldCounter > 3) {
                        postAndUpdateUI('/step', { count: button.dataset.count });
                    }
                }, 100);
            };
        });
        window.addEventListener('mouseup', (e) => {
            clearInterval(stepButtonHoldInterval);
        });

        //Ping (keep track of what process we were using
        //and if a new process spawns, reload page)
        let pid;
        post('/ping').then((res) => pid = res.pid);
        setInterval(async () => {
            const res = await post('/ping');
            if (res.pid !== pid) {
                window.location.reload();
            }
        }, 250);

        //Change Draw Option (and update UI)
        function changeDrawOption(element, option) {
            const enabled = !element.classList.contains('white');
            if (enabled)
                element.classList.add('white');
            else element.classList.remove('white');
            postAndUpdateUI('/changeDrawOption', { option, enabled });
        }

        //HTTP POST Request
        async function post(url, data = {}) {
            const res = await (await fetch(url, {
                method: 'POST',
                cache: 'no-cache',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            })).json();
            if (res.error) {
                //log error
                console.error(res.error);
            }
            return res;
        }
    </script>
</body>
</html>